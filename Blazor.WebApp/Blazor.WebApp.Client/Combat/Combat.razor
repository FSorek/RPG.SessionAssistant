@page "/combat"
@using Bogus
@using Microsoft.AspNetCore.SignalR.Client
@using SessionAssistant.Shared.DTOs.Combat
@rendermode InteractiveWebAssembly
@inject CombatClient HttpCombatClient
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

    <MudText Typo="Typo.h3">Combat Hub</MudText>
<div class="d-flex flex-grow-1 gap-4">
    @if (_hubConnection is null)
    {
    <MudText Typo="Typo.h1">Loading..</MudText>
    }
    else
    {
        <MudPaper Class="flex-auto py-8 mud-theme-primary" Width="20%" Elevation="0">
        <MudCard Class="pa-3 mx-5 flex-auto d-flex" Outlined="true" >
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Success">G</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">@PlayerCombatant.Name</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudPaper Class="pa-3 border-2 border-dashed mud-border-primary" Outlined="true" Elevation="4">
                        <MudText Typo="Typo.subtitle2">@PlayerCombatant.Initiative</MudText>
                    </MudPaper>
                </CardHeaderActions>
            </MudCardHeader>
            <MudDivider />
            <MudCardContent Class="align-self-start">
                <MudPaper Width="40%">
                    <MudNumericField Label="Ataki" @bind-Value="PlayerCombatant.Attacks" Variant="Variant.Filled"
                                     Min="1" Max="5"/>
                </MudPaper>
            </MudCardContent>
            <MudDivider />
            <MudCardActions>
                <MudGrid>
                    <MudItem xs="4">
                        <MudStack>
                            <MudButton Variant="Variant.Outlined">Wielokrotny</MudButton>
                            <MudButton Variant="Variant.Outlined">Opóźnienie</MudButton>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            @foreach (var skill in PlayerCombatant.Skills)
                            {
                                <MudButton Variant="Variant.Outlined">@skill.Name</MudButton>
                            }
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudButton OnClick="JoinCombat" Variant="Variant.Outlined">Ogłuszenie</MudButton>
                    </MudItem>
                </MudGrid>
            </MudCardActions>
        </MudCard>
    </MudPaper>
    <MudPaper Class="flex-auto py-8 mud-theme-primary" Width="60%" Elevation="0">
        <MudDataGrid Items="@_encounter.Combatants" RowStyleFunc="RowStyleFunc" Class="pa-3 mx-5 align-content-start" >
            <Columns>
                <PropertyColumn Property="c => c.Initiative" Title="Inicjatywa"/>
                <PropertyColumn Property="c => c.Name" Title="Nazwa"/>
                <PropertyColumn Property="c => c.Attacks" Title="Ataki"/>
                <TemplateColumn CellClass="d-flex justify-end" Title="Zdolnosci">
                    <CellTemplate>
                        <MudStack Row="true">
                            @foreach (var icon in @context.Item.Skills
                                          .Where(s => s.Cooldown > 0)
                                          .Select(s => s.Icon))
                            {
                                <MudIcon Icon="@icon"/>
                            }
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudPaper>
    <MudPaper Class="flex-auto d-flex py-8 mud-theme-dark" Width="20%" Elevation="0">
        <MudButton OnClick="OnClickDevEndTurn">DEV: End Turn</MudButton>
        <MudStack AlignItems="AlignItems.Start" Justify="Justify.FlexStart">
            @foreach (string message in _messages)
            {
                <MudPaper>@message</MudPaper>
                <MudDivider DividerType="DividerType.Middle"/>
            }
        </MudStack>
    </MudPaper>
    }
</div>
@code {

    public CombatantDTO PlayerCombatant { get; set; } = new CombatantDTO();
    private readonly List<string> _messages = [];
    private EncounterDTO _encounter = new EncounterDTO();
    private HubConnection _hubConnection;
    
    
    protected override void OnInitialized()
    {
        // Get Encounter State
        // Join Combat
        // Update Encounter State
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        int combatantIds = 0;
        var testCombatants = new Faker<CombatantDTO>()
            .RuleFor(c => c.Id, f => combatantIds++)
            .RuleFor(c => c.Name, f => f.Name.FullName())
            .RuleFor(c => c.Initiative, f => f.Random.Number(1, 10) + f.Random.Number(21, 50))
            .RuleFor(c => c.CanAct, f => false)
            .RuleFor(c => c.Attacks, f => f.Random.Number(1, 3))
            .RuleFor(c => c.Skills, f => 
                new List<SkillDTO>()
                {
                    new(){Cooldown = 1.OrDefault(f, .7f), Name = "Unik", Description = "Unik tooltip", Icon = Icons.Material.Filled.Bolt},
                    new(){Cooldown = 1, Name = "Parowanie", Description = "Parowanie tooltip stonks", Icon = Icons.Material.Filled.DoNotTouch},
                });
        
        PlayerCombatant = testCombatants.Generate();
        await UpdateEncounter();
        await ConnectToCombatHub();
    }

    private async Task JoinCombat()
    {
        PlayerCombatant = await HttpCombatClient.JoinCombat(1, PlayerCombatant);
    }

    private async Task ConnectToCombatHub()
    {
        _messages.Add("Joining encounter..");
        StateHasChanged();
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5039/encounterhub")
            .Build();
        _hubConnection.On<string>("ReceiveMessage", message =>
        {
            _messages.Add(message);
            StateHasChanged();
        });
        _hubConnection.On<IEnumerable<string>>("LoadMessages", (messageHistory) =>
        {
            foreach (string message in messageHistory)
            {
                _messages.Add(message);
            }
            StateHasChanged();
        });
        _hubConnection.On("UpdateEncounter", UpdateEncounter);
        await _hubConnection.StartAsync();
        _messages.Add("Encounter joined.");
        StateHasChanged();
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
    
    private string RowStyleFunc(CombatantDTO item, int rowId)
    {
        if (!_encounter.Combatants.Any())
            return "";
        if(_encounter.Combatants.Where(c => c.CanAct).Contains(item))
            return $"background-color:{Colors.Purple.Darken4}";
        return "";
    }

    private async Task UpdateEncounter()
    {
        _encounter = await HttpCombatClient.GetEncounterAsync(1);
        StateHasChanged();
    }

    
    private void OnClickDevEndTurn(MouseEventArgs obj)
    {
        _encounter.Combatants.Single(c => c.Id == _encounter.Combatants
            .Where(c => c.CanAct)
            .MaxBy(c => c.Initiative)!.Id).CanAct = false;
        StateHasChanged();
    }

}