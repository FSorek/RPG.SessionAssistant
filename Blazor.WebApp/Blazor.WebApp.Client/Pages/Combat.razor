@page "/combat"
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>Combat Hub</h3>
<div class="d-flex flex-grow-1 gap-4">
    <MudPaper Class="flex-auto d-flex py-8 mud-theme-primary" Width="20%" Elevation="0">
        <MudCard Class="pa-3 mx-5 flex-auto d-flex" Outlined="true">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Success">G</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText>Gerlach Bauer</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudPaper Class="pa-3 border-2 border-dashed mud-border-primary" Outlined="true" Elevation="4">
                        <MudText Typo="Typo.subtitle2">@Initiative</MudText>
                    </MudPaper>
                </CardHeaderActions>
            </MudCardHeader>
            <MudDivider />
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="9">
                        <MudStack>
                            <MudSwitch @bind-Value="CanParry" Label="Parowanie" Color="Color.Success"/>
                            <MudSwitch @bind-Value="CanDodge" Label="Unik" Color="Color.Success"/>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="3">
                        <MudNumericField Label="Ataki" Variant="Variant.Filled" Min="1" Max="5"/>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudDivider />
            <MudCardActions>
                <MudGrid>
                    <MudItem xs="4">
                        <MudStack>
                            <MudButton Variant="Variant.Outlined">Wielokrotny</MudButton>
                            <MudButton Variant="Variant.Outlined">Opóźnienie</MudButton>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudStack>
                            <MudButton Variant="Variant.Outlined">Parowanie</MudButton>
                            <MudButton Variant="Variant.Outlined">Unik</MudButton>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="4">
                        <MudButton Variant="Variant.Outlined">Ogłuszenie</MudButton>
                    </MudItem>
                </MudGrid>
            </MudCardActions>
        </MudCard>
    </MudPaper>
    <MudPaper Class="flex-auto d-flex py-8 mud-theme-primary" Width="60%" Elevation="0">
        
    </MudPaper>
    <MudPaper Class="flex-auto d-flex py-8 mud-theme-dark" Width="20%" Elevation="0">
        <MudStack AlignItems="AlignItems.Start" Justify="Justify.FlexStart">
            @foreach (string message in _messages)
            {
                <MudPaper>@message</MudPaper>
                <MudDivider DividerType="DividerType.Middle"/>
            }
        </MudStack>
    </MudPaper>
</div>
@code {
    public bool CanParry { get; set; }
    public bool CanDodge { get; set; }
    public int Initiative { get; set; }

    private readonly List<string> _messages = [];
   
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        if (_hubConnection?.State == HubConnectionState.Connected)
            return;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Initiative = new Random().Next(1, 10) + 45;
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/combathub"))
                .Build();
            _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {
                _messages.Add($"{user}: {message}");
                StateHasChanged();
            });
            _hubConnection.On<IEnumerable<string>>("LoadMessages", (messageHistory) =>
            {
                foreach (string message in messageHistory)
                {
                    _messages.Add(message);
                }
                StateHasChanged();
            });
            await _hubConnection.StartAsync();

            await _hubConnection.SendAsync("EnterCombat", Initiative);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}